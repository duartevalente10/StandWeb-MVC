// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StandWeb.Data;

namespace StandWeb.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarrosMarcas", b =>
                {
                    b.Property<int>("ListaDeCarrosIdCarros")
                        .HasColumnType("int");

                    b.Property<int>("ListaDeMarcasIdMarcas")
                        .HasColumnType("int");

                    b.HasKey("ListaDeCarrosIdCarros", "ListaDeMarcasIdMarcas");

                    b.HasIndex("ListaDeMarcasIdMarcas");

                    b.ToTable("CarrosMarcas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "c",
                            ConcurrencyStamp = "e52ec432-be40-4bc8-94ca-32454f155fbb",
                            Name = "Cliente",
                            NormalizedName = "CLIENTE"
                        },
                        new
                        {
                            Id = "g",
                            ConcurrencyStamp = "06af6534-938b-4d1e-81e7-4990f1bee172",
                            Name = "Gestor",
                            NormalizedName = "GESTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StandWeb.Models.Carros", b =>
                {
                    b.Property<int>("IdCarros")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<int>("Cilindrada")
                        .HasColumnType("int");

                    b.Property<string>("Combustivel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Potencia")
                        .HasColumnType("int");

                    b.Property<string>("Preco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCarros");

                    b.ToTable("Carros");

                    b.HasData(
                        new
                        {
                            IdCarros = 1,
                            Ano = 2010,
                            Cilindrada = 8000,
                            Combustivel = "Gasolina",
                            Foto = "veyron.jpg",
                            Modelo = "Bugatti Veyron",
                            Potencia = 1400,
                            Preco = "2300000"
                        },
                        new
                        {
                            IdCarros = 2,
                            Ano = 2018,
                            Cilindrada = 9000,
                            Combustivel = "Gasolina",
                            Foto = "chiron.jpg",
                            Modelo = "Bugatti Chiron",
                            Potencia = 1600,
                            Preco = "2800000"
                        },
                        new
                        {
                            IdCarros = 3,
                            Ano = 2021,
                            Cilindrada = 10000,
                            Combustivel = "Gasolina",
                            Foto = "divo.jpg",
                            Modelo = "Bugatti Divo",
                            Potencia = 1700,
                            Preco = "5000000"
                        },
                        new
                        {
                            IdCarros = 4,
                            Ano = 2019,
                            Cilindrada = 8000,
                            Combustivel = "Hibrido",
                            Foto = "P1.jpg",
                            Modelo = "McLaren P1",
                            Potencia = 1600,
                            Preco = "1300000"
                        },
                        new
                        {
                            IdCarros = 5,
                            Ano = 2020,
                            Cilindrada = 7000,
                            Combustivel = "Hibrido",
                            Foto = "senna.jpg",
                            Modelo = "McLaren Senna",
                            Potencia = 1200,
                            Preco = "1000000"
                        },
                        new
                        {
                            IdCarros = 6,
                            Ano = 2021,
                            Cilindrada = 9000,
                            Combustivel = "Hibrido",
                            Foto = "sian.jpg",
                            Modelo = "Lamborgini Sian",
                            Potencia = 1500,
                            Preco = "3700000"
                        },
                        new
                        {
                            IdCarros = 7,
                            Ano = 2021,
                            Cilindrada = 8000,
                            Combustivel = "Hibrido",
                            Foto = "gemera.jpg",
                            Modelo = "Koenigsegg Gemera",
                            Potencia = 1500,
                            Preco = "1900000"
                        },
                        new
                        {
                            IdCarros = 8,
                            Ano = 2019,
                            Cilindrada = 9000,
                            Combustivel = "Gasolina",
                            Foto = "jesko.jpg",
                            Modelo = "Koenigsegg Jesko",
                            Potencia = 1700,
                            Preco = "2500000"
                        },
                        new
                        {
                            IdCarros = 9,
                            Ano = 2018,
                            Cilindrada = 5000,
                            Combustivel = "Hibrido",
                            Foto = "LaFerrari.jpg",
                            Modelo = "Ferrari Laferrari ",
                            Potencia = 850,
                            Preco = "2000000"
                        },
                        new
                        {
                            IdCarros = 10,
                            Ano = 2013,
                            Cilindrada = 6000,
                            Combustivel = "Gasolina",
                            Foto = "CarreraGT.jpg",
                            Modelo = "Porche Carrera gt",
                            Potencia = 800,
                            Preco = "1900000"
                        },
                        new
                        {
                            IdCarros = 11,
                            Ano = 2021,
                            Cilindrada = 10000,
                            Combustivel = "Eletrico",
                            Foto = "nevera.jpg",
                            Modelo = "Rimac Nevera",
                            Potencia = 2000,
                            Preco = "100000"
                        },
                        new
                        {
                            IdCarros = 12,
                            Ano = 2017,
                            Cilindrada = 8000,
                            Combustivel = "Gasolina",
                            Foto = "Huayra.jpg",
                            Modelo = "Paggani Huayra",
                            Potencia = 1300,
                            Preco = "300000"
                        });
                });

            modelBuilder.Entity("StandWeb.Models.Gostos", b =>
                {
                    b.Property<int>("IdGostos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarrosFK")
                        .HasColumnType("int");

                    b.Property<int>("UtilizadoresFK")
                        .HasColumnType("int");

                    b.HasKey("IdGostos");

                    b.HasIndex("CarrosFK");

                    b.HasIndex("UtilizadoresFK");

                    b.ToTable("Gostos");
                });

            modelBuilder.Entity("StandWeb.Models.Marcas", b =>
                {
                    b.Property<int>("IdMarcas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMarcas");

                    b.ToTable("ListaDeMarcas");

                    b.HasData(
                        new
                        {
                            IdMarcas = 1,
                            Nome = "Buggati"
                        },
                        new
                        {
                            IdMarcas = 2,
                            Nome = "Pagani"
                        },
                        new
                        {
                            IdMarcas = 3,
                            Nome = "McLaren"
                        },
                        new
                        {
                            IdMarcas = 4,
                            Nome = "Lamborghini"
                        },
                        new
                        {
                            IdMarcas = 5,
                            Nome = "Koenigsegg"
                        },
                        new
                        {
                            IdMarcas = 6,
                            Nome = "Ferrari"
                        },
                        new
                        {
                            IdMarcas = 7,
                            Nome = "Porsche"
                        },
                        new
                        {
                            IdMarcas = 8,
                            Nome = "Rimac"
                        },
                        new
                        {
                            IdMarcas = 9,
                            Nome = "Outra"
                        });
                });

            modelBuilder.Entity("StandWeb.Models.Reviews", b =>
                {
                    b.Property<int>("IdReview")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarrosFK")
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("Pontuacao")
                        .HasColumnType("int");

                    b.Property<int>("UtilizadoresFK")
                        .HasColumnType("int");

                    b.Property<bool>("Visibilidade")
                        .HasColumnType("bit");

                    b.HasKey("IdReview");

                    b.HasIndex("CarrosFK");

                    b.HasIndex("UtilizadoresFK");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("StandWeb.Models.Utilizadores", b =>
                {
                    b.Property<int>("IdUtilizador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ControlarReview")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserNameId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUtilizador");

                    b.ToTable("Utilizadores");
                });

            modelBuilder.Entity("CarrosMarcas", b =>
                {
                    b.HasOne("StandWeb.Models.Carros", null)
                        .WithMany()
                        .HasForeignKey("ListaDeCarrosIdCarros")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StandWeb.Models.Marcas", null)
                        .WithMany()
                        .HasForeignKey("ListaDeMarcasIdMarcas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StandWeb.Models.Gostos", b =>
                {
                    b.HasOne("StandWeb.Models.Carros", "Carro")
                        .WithMany("ListaDeGostos")
                        .HasForeignKey("CarrosFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StandWeb.Models.Utilizadores", "Utilizador")
                        .WithMany("ListaDeGostos")
                        .HasForeignKey("UtilizadoresFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carro");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("StandWeb.Models.Reviews", b =>
                {
                    b.HasOne("StandWeb.Models.Carros", "Carro")
                        .WithMany("ListaDeReviews")
                        .HasForeignKey("CarrosFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StandWeb.Models.Utilizadores", "Utilizador")
                        .WithMany("ListaDeReviews")
                        .HasForeignKey("UtilizadoresFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carro");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("StandWeb.Models.Carros", b =>
                {
                    b.Navigation("ListaDeGostos");

                    b.Navigation("ListaDeReviews");
                });

            modelBuilder.Entity("StandWeb.Models.Utilizadores", b =>
                {
                    b.Navigation("ListaDeGostos");

                    b.Navigation("ListaDeReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
